Travis Churchill
Final Project Documentation

Discovery:
This project will require a model for the temperature, rpm, electrical charge, oil pressure, speed, odometer, trip meter, gear, fuel.

I will need a root controller, with the capability of swapping out views at will.  

Documented Work:
Putting together so many widgets is proving to be a pain.  The RPM for the engine seems like it should be the driving force for the other controllers.  

I definitely have to put together a model object base class that can be used by the meters in the instrument panel.  The base view controller should be a singleton because several of the model objects need to be able to check on the status of it (for telling whether the car is on, for instance).  

After beginning my work, I realized that I needed to build a few extra classes.  a MeterManager, to handle the updates to the various meters.  This allows the actual car controller to deal with the displaying of the meters, rather than managing the interactions between the objects.  

I also needed to add in a gearbox, to deal with changes to meters which relate to the state of the engine itself.  

To assist in debugging, I created a logging class with static methods so that I don't have to instantiate a logger for each class I implement.  I'm building it with different logging levels.  I know there's a way to do this so that the log statements get compiled out, but I forget how to do this.  If I have time at the end I may reconfigure this, but for lab purposes it is probably good enough.

I wound up refactoring the update method for the car controller.  I was doing a lot of if/else statements, and i replaced that with a call to a dictionary object.  This implementation means that I have to do less coding when gagues are added to the display.  

I'm now attempting to pull out the rendering of the dials from the car controller.  I mistakenly coupled their usage to the car controller in a way that made it difficult to swap them out.  I think I can do better by adding an abstract view controller class which both of my dials can inherit from.  This should work as long as I have enough time to finish implementing them.
