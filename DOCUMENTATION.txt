Travis Churchill
Final Project Documentation

Discovery:
This project will require a model for the temperature, rpm, electrical charge, oil pressure, speed, odometer, trip meter, gear, fuel.

I will need a root controller, with the capability of swapping out views at will.  

Documented Work:
Putting together so many widgets is proving to be a pain.  The RPM for the engine seems like it should be the driving force for the other controllers.  

I definitely have to put together a model object base class that can be used by the meters in the instrument panel.  The base view controller should be a singleton because several of the model objects need to be able to check on the status of it (for telling whether the car is on, for instance).  

After beginning my work, I realized that I needed to build a few extra classes.  a MeterManager, to handle the updates to the various meters.  This allows the actual car controller to deal with the displaying of the meters, rather than managing the interactions between the objects.  

I also needed to add in a gearbox, to deal with changes to meters which relate to the state of the engine itself.  

To assist in debugging, I created a logging class with static methods so that I don't have to instantiate a logger for each class I implement.  I'm building it with different logging levels.  I know there's a way to do this so that the log statements get compiled out, but I forget how to do this.  If I have time at the end I may reconfigure this, but for lab purposes it is probably good enough.

I wound up refactoring the update method for the car controller.  I was doing a lot of if/else statements, and i replaced that with a call to a dictionary object.  This implementation means that I have to do less coding when gagues are added to the display.  

I'm now attempting to pull out the rendering of the dials from the car controller.  I mistakenly coupled their usage to the car controller in a way that made it difficult to swap them out.  I think I can do better by adding an abstract view controller class which both of my dials can inherit from.  This should work as long as I have enough time to finish implementing them.

add indicators for 'low fuel' and 'shift light'.

You know.. I made the meter manager a singleton, but I wonder if I don't need it to be one.  I probably should have planned that aspect better.  I was expecting to restructure the car controller in such a way that it made sense, but the way the analog/digital gague controllers are shaping up, it was an unnecessary step.

ALSO GOOD TO KNOW:  if you override loadView, remember to call [super loadView] or it will infinite loop and not tell you why. 

I also just spent a couple hours trying to get rid of duplicate layers in my images.  For some reason instantiating a controller as a subview of another controller has crazy results if I don't make a new NSView inside loadView.  That's actually pretty irritating because I don't think I should have to do that if i'm calling initWithNibName:bundle: with nil values.

I'm having trouble integrating the analog clock hands into the gagues of my controller.  It's displaying at this point, but the rotation is not updating again.  I suspect it is something obvious but I haven't been making progress.  

I finally figured out how to rig the analog dials.  I had to fix the way I was calculating the angle of rotation for the little needle.  I also added in a method for labeling the sides of the indicator with numbers as a factor of the min/max degree of rotation for the dial.  It should work well enough for what I'm doing, even if it's not that pretty.  

I rigged a background color class to make it easier to tell where the frame ended on my nsview objects.  This is one of those things that Cocoa-Touch already has a method for, but I had to build by hand for regular Cocoa.  It looks a little nicer this way than with just the gray, so I'll probably just keep the colors in there when I turn it in.

The needle on the analog odometer barely moves, due to the scale.  I'll reduce the maximum so it fluctuates, i suppose.

Wiring the analog controllers to the models turned out to be really easy, actually.  The toughest part was getting the dials to display.  In retrospect I could have built a factory for setting up those dials, but It's in there now, so I'll just leave it.  That's another design pattern that I forget about sometimes.  

After the presentation, I realized that at some point I broke the trigger that caused the car to turn off when it ran out of gas.  I realize now that I had turned it off intentionally when the car was turning off prematurely.  This was due to a miscalculation in the isEmpty method of the fuel model.  I've now fixed this.  Now the car turns off when it is out of gas.  I also made it so the car will not turn on while it is out of gas, either.  You have to hit the button to refill the gas tank.
